---
import Menu from "./menu.astro";

interface Props {
    withLogo?: boolean;
    withoutMenu?: boolean;
}

const { withLogo = true, withoutMenu = false }: Props = Astro.props;
---

<div class="header">
    <div class="container">
        { 
            withLogo && ( 
                <a class="logo" href="/"> 
                    <img 
                        src="/svg/logo.svg" 
                        alt="Logo RustWeek 2025" 
                    /> 
                </a> 
            ) 
        }
        {
            !withoutMenu && (
                // <script is:inline>
                //   window.addEventListener('DOMContentLoaded', (event) => {
                //     new PagefindUI({ element: '#search', resetStyles: false });
                //   });
                // </script>
                // <div class="search-relative-parent">
                //     <div id="search">
                //     </div>
                // </div>

                <div class="hamburger button button-primary" data-menu-toggle></div>
                <div class="menu" data-menu>
                    <Menu location="header" />                    
                    <a target="_blank" href="https://event.onliveevent.nl/rustweek-2026" class="button button-primary">Tickets</a>
                </div>
                <div class="overlay" data-menu-overlay></div>
            )
        }
    </div>
</div>

<script>
    const toggle = document.querySelector("[data-menu-toggle]");
    const menu = document.querySelector("[data-menu]");
    const overlay = document.querySelector("[data-menu-overlay]");

    function toggleMenu() {
        menu?.classList.toggle("open");
        overlay?.classList.toggle("open");
        toggle?.classList.toggle("open");
    }

    toggle?.addEventListener("click", toggleMenu);

    const header = document.querySelector(".header") as HTMLElement;
    const hero = document.querySelector('.hero') as HTMLElement;

    function scrollHanlde(_event: Event) {
      const heroHeight = hero.offsetHeight;
      const headerHeight = header.offsetHeight;
      const treshold = heroHeight - headerHeight;
      const scroll = window.scrollY;

      if (scroll > treshold) {
        header?.classList.add('scrolled');
      } else {
        header?.classList.remove('scrolled');
      }
    }

    if (hero && header) {
        document.addEventListener('scroll', scrollHanlde);
    }
</script>

<style is:global>
:root {
    --pagefind-ui-scale: 0.75;
    --pagefind-ui-primary: #034ad8;
    --pagefind-ui-text: black;
    --pagefind-ui-background: #fff0e6;

    --pagefind-ui-border-width: 0px;
    --pagefind-ui-border-radius: 0px;
    --pagefind-ui-image-border-radius: 0px;
    --pagefind-ui-image-box-ratio: 3 / 2;
}

#search {
    background-color: #fff0e6;
    flex-shrink: 1;
}
#search>div>form>div {
    border: 2px solid black;
    padding: 2px;

    max-height: min(60rem, 80vh);
    overflow: scroll;
}
</style>

<style lang="scss">
    @use "../../styles/variables.scss";
    @use "../../styles/breakpoint.scss";

    .search-relative-parent {
        position: relative;
        height: calc(64px * var(--pagefind-ui-scale));
    }

    .header {
        background-color: variables.$color-yellow-400;
        position: sticky;
        transition-duration: 150ms;
        transition-property: background-color, height;
        z-index: 100;
        top: 0;
        left: 0;
        
        > div {
            align-items: center;
            height: variables.space(18);
            display: flex;
            gap: 1em;
            border-bottom: 1px solid variables.$color-yellow-500;

            @include breakpoint.wider_than(lg) {
                height: variables.space(20);
            }
        }

        .logo {
            img {
                height: variables.space(14);
            }
        }

        .hamburger {
            margin-inline-start: auto;
            height: variables.space(12);
            padding-inline: 1rem;

            @include breakpoint.wider_than(lg) {
                display: none;
            }

            &::before {
                content: "Menu";
            }

            &.open::before {
                content: "Close";
            }
        }

        .menu {
            align-items: flex-start;

            background-color: variables.$color-neutral-400;
            border: 1px solid variables.$color-red-500;
            bottom: variables.space(0);

            display: flex;
            flex-direction: column;
            left: variables.space(4);
            opacity: 0;
            padding: variables.space(4);
            position: absolute;
            transform-origin: top;
            transform: scaleY(0);
            transition-duration: 250ms;
            transition-property: opacity, visibility, transform;
            translate: 0 100%;
            visibility: hidden;
            width: calc(100% - variables.space(8));
            gap: variables.space(3);

            max-height: calc(100vh - 88px);
            overflow: auto;

            @include breakpoint.wider_than(lg) {
                align-items: center;
                background-color: transparent;
                border: none;
                bottom: auto;
                flex-direction: row;
                gap: variables.space(6);
                left: auto;
                margin-inline-start: auto;
                opacity: 1;
                padding: 0;
                position: static;
                transform: scaleY(1);
                translate: none;
                visibility: visible;
                width: auto;
                overflow: visible;
            }

            &.open {
                opacity: 1;
                transform: scaleY(1);
                visibility: visible;
            }
        }

        .overlay {
            background-color: variables.$color-yellow-500;
            inset: 0;
            opacity: 0;
            pointer-events: none;
            position: fixed;
            transition-duration: 250ms;
            transition-property: opacity, visibility;
            visibility: hidden;
            z-index: -1;

            @include breakpoint.wider_than(lg) {
                visibility: hidden;
                display: none;
            }

            &.open {
                visibility: visible;
                opacity: 0.75;
                pointer-events: all;
            }
        }
    }
</style>
